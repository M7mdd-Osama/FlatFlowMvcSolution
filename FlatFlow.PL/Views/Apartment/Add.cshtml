@{
    Layout = null;
    ViewData["ActivePage"] = "Apartments";
}
@model FlatFlow.PL.ViewModels.AddApartmentViewModel
@{
    Layout = null;
    ViewData["ActivePage"] = "Add";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Apartment - FlatFlow</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f0f23 100%);
            color: #ffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .main-container {
            background: rgba(255, 255, 255, 0.02);
            backdrop-filter: blur(10px);
            border-radius: 0;
            border: none;
            margin: 0;
            min-height: 100vh;
            box-shadow: none;
            padding: 20px;
        }

        .form-container {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(147, 51, 234, 0.3);
            border-radius: 20px;
            padding: 40px;
            backdrop-filter: blur(10px);
            box-shadow: 0 10px 30px rgba(124, 58, 237, 0.1);
            max-width: 800px;
            margin: 0 auto;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(45deg, #8b5cf6, #a78bfa);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 30px;
            text-align: center;
        }

        .form-label {
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 10px;
            display: block;
            font-size: 1.1rem;
        }

        .form-control, .form-select {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(147, 51, 234, 0.4);
            color: #ffffff;
            border-radius: 12px;
            padding: 15px 20px;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

            .form-control:focus, .form-select:focus {
                background: rgba(255, 255, 255, 0.12);
                border-color: #8b5cf6;
                box-shadow: 0 0 0 0.2rem rgba(139, 92, 246, 0.25);
                color: #ffffff;
            }

            .form-control::placeholder {
                color: rgba(255, 255, 255, 0.6);
            }

        .btn-primary {
            background: linear-gradient(45deg, #7c3aed, #8b5cf6);
            border: none;
            border-radius: 12px;
            padding: 15px 30px;
            font-weight: 600;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(124, 58, 237, 0.3);
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(124, 58, 237, 0.4);
                background: linear-gradient(45deg, #8b5cf6, #9333ea);
            }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(147, 51, 234, 0.3);
            border-radius: 12px;
            padding: 15px 30px;
            font-weight: 600;
            font-size: 1.1rem;
            color: #ffffff;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

            .btn-secondary:hover {
                background: rgba(255, 255, 255, 0.15);
                border-color: rgba(147, 51, 234, 0.5);
                color: #ffffff;
                transform: translateY(-2px);
            }

        .media-upload-container {
            margin-bottom: 25px;
        }

        .media-upload-area {
            background: rgba(0, 0, 0, 0.2);
            border: 2px dashed rgba(147, 51, 234, 0.5);
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .media-upload-area.dragover {
                border-color: #8b5cf6;
                background: rgba(139, 92, 246, 0.1);
            }

            .media-upload-area i {
                font-size: 3rem;
                color: #8b5cf6;
                margin-bottom: 20px;
                display: block;
            }

            .media-upload-area p {
                color: rgba(255, 255, 255, 0.8);
                margin-bottom: 10px;
                font-size: 1.1rem;
            }

            .media-upload-area small {
                color: rgba(255, 255, 255, 0.6);
                font-size: 0.9rem;
                display: block;
                margin-bottom: 15px;
            }

        .upload-btn {
            background: linear-gradient(45deg, #7c3aed, #8b5cf6);
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            color: white;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

            .upload-btn:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 15px rgba(124, 58, 237, 0.3);
            }

        .preview-container {
            margin-top: 20px;
        }

        .preview-media {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 15px;
        }

        .preview-item {
            position: relative;
            display: inline-block;
        }

        .preview-image, .preview-video {
            width: 120px;
            height: 120px;
            border-radius: 10px;
            object-fit: cover;
            border: 2px solid rgba(147, 51, 234, 0.3);
        }

        .video-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.7);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 16px;
        }

        .remove-media {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #dc3545;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: white;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

            .remove-media:hover {
                background: #c82333;
                transform: scale(1.1);
            }

        .text-danger {
            color: #ff6b6b !important;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .alert {
            background: rgba(220, 53, 69, 0.1);
            border: 1px solid rgba(220, 53, 69, 0.3);
            border-radius: 12px;
            color: #ff6b6b;
            padding: 15px;
            margin-bottom: 20px;
        }

        .alert-success {
            background: rgba(25, 135, 84, 0.1);
            border-color: rgba(25, 135, 84, 0.3);
            color: #51cf66;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loading-spinner {
            border: 4px solid rgba(139, 92, 246, 0.3);
            border-top: 4px solid #8b5cf6;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        .file-counter {
            background: rgba(139, 92, 246, 0.2);
            border: 1px solid rgba(139, 92, 246, 0.4);
            border-radius: 8px;
            padding: 10px;
            margin-top: 10px;
            text-align: center;
            color: #a78bfa;
            font-weight: 600;
        }

        .progress-bar {
            background: rgba(139, 92, 246, 0.2);
            border-radius: 10px;
            height: 20px;
            margin: 10px 0;
            overflow: hidden;
            display: none;
        }

        .progress-fill {
            background: linear-gradient(45deg, #7c3aed, #8b5cf6);
            height: 100%;
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 10px;
        }

        @@media (max-width: 768px) {
            .page-title

        {
            font-size: 2rem;
        }

        .form-container {
            padding: 25px;
        }

        }
    </style>
</head>
<body>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <div class="main-container">
        <div class="form-container">
            <h1 class="page-title">
                <i class="fas fa-plus-circle"></i> Add New Apartment
            </h1>

            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <strong>Please fix the following errors:</strong>
                    <ul class="mb-0 mt-2">
                        @foreach (var modelState in ViewData.ModelState.Values)
                        {
                            foreach (var error in modelState.Errors)
                            {
                                <li>@error.ErrorMessage</li>
                            }
                        }
                    </ul>
                </div>
            }

            <form id="apartmentForm" method="post" action="@Url.Action("Add", "Apartment")" enctype="multipart/form-data">
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Title</label>
                        <input type="text" name="Title" class="form-control" placeholder="Enter apartment title"
                               value="@Model?.Title" required>
                        @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Monthly Rent ($)</label>
                        <input type="number" name="Price" class="form-control" placeholder="Enter monthly rent"
                               step="0.01" min="0" value="@Model?.Price" required>
                        @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <label class="form-label">Location</label>
                        <input type="text" name="Location" class="form-control" placeholder="Enter apartment location"
                               value="@Model?.Location" required>
                        @Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <label class="form-label">Description</label>
                        <textarea name="Description" class="form-control" placeholder="Enter apartment description"
                                  rows="4" required>@Model?.Description</textarea>
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="media-upload-container">
                    <label class="form-label">Apartment Media (Images & Videos)</label>
                    <div class="media-upload-area" id="uploadArea">
                        <i class="fas fa-cloud-upload-alt"></i>
                        <p>Upload Images & Videos</p>
                        <small>Images: PNG, JPG, JPEG | Videos: MP4, MOV, AVI | Max 100MB each</small>
                        <button type="button" class="upload-btn" onclick="openFileDialog()">
                            <i class="fas fa-folder-open"></i> Choose Files
                        </button>
                        <input type="file" name="Images" id="mediaFiles" multiple
                               accept="image/jpeg,image/jpg,image/png,video/mp4,video/mov,video/avi"
                               style="display: none;">
                    </div>

                    <div class="progress-bar" id="progressBar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>

                    <div class="preview-container">
                        <div class="file-counter" id="fileCounter" style="display: none;">
                            <i class="fas fa-info-circle"></i> <span id="fileCountText">0 files selected</span>
                        </div>
                        <div class="preview-media" id="mediaPreview"></div>
                        <button type="button" class="btn btn-danger mt-2" onclick="clearAllMedia()" style="display: none;" id="clearBtn">
                            <i class="fas fa-trash"></i> Clear All Files
                        </button>
                    </div>
                    @Html.ValidationMessageFor(m => m.Images, "", new { @class = "text-danger" })
                </div>

                <div class="row mt-4">
                    <div class="col-12">
                        <div class="d-flex gap-3">
                            <button type="submit" class="btn btn-primary" id="submitBtn">
                                <i class="fas fa-save"></i> Save Apartment
                            </button>
                            <a href="@Url.Action("Index", "Apartment")" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        let selectedFiles = [];
        const maxFileSize = 100 * 1024 * 1024; // 100MB - Updated!
        const allowedImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];
        const allowedVideoTypes = ['video/mp4', 'video/mov', 'video/avi'];
        const allowedTypes = [...allowedImageTypes, ...allowedVideoTypes];

        function openFileDialog() {
            document.getElementById('mediaFiles').click();
        }

        document.getElementById('mediaFiles').addEventListener('change', function(e) {
            const newFiles = Array.from(e.target.files);
            addFiles(newFiles);
        });

        function addFiles(newFiles) {
            let validFiles = [];
            let errors = [];

            newFiles.forEach(file => {
                // Check file type
                if (!allowedTypes.includes(file.type)) {
                    errors.push(`${file.name}: File type not supported`);
                    return;
                }

                // Check file size - Now 100MB for all files
                if (file.size > maxFileSize) {
                    errors.push(`${file.name}: File size exceeds 100MB`);
                    return;
                }

                // Check if file already exists
                const exists = selectedFiles.some(existingFile =>
                    existingFile.name === file.name && existingFile.size === file.size
                );

                if (!exists) {
                    validFiles.push(file);
                }
            });

            // Add valid files to selection
            selectedFiles = [...selectedFiles, ...validFiles];

            // Show errors if any
            if (errors.length > 0) {
                alert('Errors found:\n' + errors.join('\n'));
            }

            updateFileCounter();
            previewMedia();
            updateFileInput();
        }

        function previewMedia() {
            const previewContainer = document.getElementById('mediaPreview');
            const clearBtn = document.getElementById('clearBtn');

            previewContainer.innerHTML = '';

            if (selectedFiles.length > 0) {
                clearBtn.style.display = 'block';

                selectedFiles.forEach((file, index) => {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'preview-item';

                    if (allowedImageTypes.includes(file.type)) {
                        // Create image preview
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.className = 'preview-image';
                            img.alt = file.name;
                            previewItem.appendChild(img);
                        };
                        reader.readAsDataURL(file);

                    } else if (allowedVideoTypes.includes(file.type)) {
                        // Create video preview
                        const video = document.createElement('video');
                        video.className = 'preview-video';
                        video.muted = true;

                        const videoOverlay = document.createElement('div');
                        videoOverlay.className = 'video-overlay';
                        videoOverlay.innerHTML = '<i class="fas fa-play"></i>';

                        const reader = new FileReader();
                        reader.onload = function(e) {
                            video.src = e.target.result;
                        };
                        reader.readAsDataURL(file);

                        previewItem.appendChild(video);
                        previewItem.appendChild(videoOverlay);
                    }

                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.className = 'remove-media';
                    removeBtn.innerHTML = '×';
                    removeBtn.onclick = () => removeFile(index);

                    previewItem.appendChild(removeBtn);
                    previewContainer.appendChild(previewItem);
                });
            } else {
                clearBtn.style.display = 'none';
            }
        }

        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileCounter();
            updateFileInput();
            previewMedia();
        }

        function clearAllMedia() {
            selectedFiles = [];
            document.getElementById('mediaFiles').value = '';
            updateFileCounter();
            previewMedia();
        }

        function updateFileInput() {
            const dataTransfer = new DataTransfer();
            selectedFiles.forEach(file => dataTransfer.items.add(file));
            document.getElementById('mediaFiles').files = dataTransfer.files;
        }

        function updateFileCounter() {
            const counter = document.getElementById('fileCounter');
            const countText = document.getElementById('fileCountText');

            if (selectedFiles.length > 0) {
                counter.style.display = 'block';
                const imageCount = selectedFiles.filter(f => allowedImageTypes.includes(f.type)).length;
                const videoCount = selectedFiles.filter(f => allowedVideoTypes.includes(f.type)).length;
                countText.textContent = `${selectedFiles.length} files selected (${imageCount} images, ${videoCount} videos)`;
            } else {
                counter.style.display = 'none';
            }
        }

        // Drag and drop functionality
        const uploadArea = document.getElementById('uploadArea');

        uploadArea.addEventListener('dragover', function(e) {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', function(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', function(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');

            const files = Array.from(e.dataTransfer.files);
            addFiles(files);
        });

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Form submission with progress
        document.getElementById('apartmentForm').addEventListener('submit', function(e) {
            if (selectedFiles.length === 0) {
                alert('Please select at least one file');
                e.preventDefault();
                return;
            }

            // Show loading overlay
            document.getElementById('loadingOverlay').style.display = 'flex';
            document.getElementById('submitBtn').disabled = true;
            document.getElementById('progressBar').style.display = 'block';

            // Simulate upload progress (you can replace this with real progress tracking)
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress >= 90) {
                    progress = 90;
                    clearInterval(progressInterval);
                }
                document.getElementById('progressFill').style.width = progress + '%';
            }, 200);
        });

        // Hide loading on page load
        window.addEventListener('load', function() {
            document.getElementById('loadingOverlay').style.display = 'none';
        });
    </script>
</body>
</html>