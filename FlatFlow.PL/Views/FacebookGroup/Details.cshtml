@model FacebookGroupDetailsViewModel
@{
    Layout = null;
    ViewData["ActivePage"] = "FacebookGroups";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.GroupName - Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f0f23 100%);
            color: #ffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .main-container {
            background: rgba(255, 255, 255, 0.02);
            backdrop-filter: blur(10px);
            border-radius: 0;
            border: none;
            margin: 0;
            min-height: 100vh;
            box-shadow: none;
        }

        .sidebar {
            background: linear-gradient(180deg, #7c3aed 0%, #5b21b6 100%);
            border-radius: 0;
            padding: 30px 20px;
            min-height: 100%;
            position: relative;
            overflow: hidden;
        }

            .sidebar::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: radial-gradient(circle, rgba(147, 51, 234, 0.1) 0%, transparent 70%);
                animation: pulse 4s ease-in-out infinite;
            }

        @@keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 0.3;
            }

            50% {
                transform: scale(1.1);
                opacity: 0.1;
            }
        }

        .sidebar h3 {
            color: #ffff;
            font-weight: 700;
            margin-bottom: 30px;
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .nav-item {
            margin-bottom: 10px;
            position: relative;
            z-index: 2;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.8) !important;
            padding: 15px 20px;
            border-radius: 15px;
            transition: all 0.3s ease;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 12px;
            font-weight: 500;
            border: 1px solid transparent;
        }

            .nav-link:hover, .nav-link.active {
                color: #ffffff !important;
                background: rgba(255, 255, 255, 0.1);
                border-color: rgba(255, 255, 255, 0.2);
                transform: translateX(5px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            }

        .main-content {
            padding: 30px;
            border-radius: 0;
        }

        .header-section {
            background: rgba(124, 58, 237, 0.1);
            border: 1px solid rgba(147, 51, 234, 0.3);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }

        .page-title {
            font-size: 2.2rem;
            font-weight: 700;
            background: linear-gradient(45deg, #8b5cf6, #a78bfa);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 15px;
            line-height: 1.2;
        }

        .breadcrumb {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
            padding: 12px 20px;
            margin-bottom: 25px;
            border: 1px solid rgba(147, 51, 234, 0.3);
        }

        .breadcrumb-item {
            color: rgba(255, 255, 255, 0.7);
        }

            .breadcrumb-item.active {
                color: #8b5cf6;
                font-weight: 600;
            }

            .breadcrumb-item + .breadcrumb-item::before {
                color: rgba(255, 255, 255, 0.5);
                content: ">";
            }

        .breadcrumb a {
            color: #a78bfa;
            text-decoration: none;
            transition: color 0.3s ease;
        }

            .breadcrumb a:hover {
                color: #8b5cf6;
            }

        /* Group Info Card */
        .group-info-card {
            background: linear-gradient(135deg, rgba(24, 119, 242, 0.1) 0%, rgba(66, 165, 245, 0.05) 100%);
            border: 1px solid rgba(24, 119, 242, 0.3);
            border-radius: 25px;
            padding: 30px;
            margin-bottom: 30px;
            backdrop-filter: blur(15px);
            position: relative;
            overflow: hidden;
        }

            .group-info-card::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -50%;
                width: 100px;
                height: 100px;
                background: radial-gradient(circle, rgba(24, 119, 242, 0.1) 0%, transparent 70%);
                animation: float 6s ease-in-out infinite;
            }

        .group-header {
            display: flex;
            align-items: center;
            gap: 25px;
            margin-bottom: 25px;
        }

        .group-avatar {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #1877f2, #42a5f5);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            color: white;
            box-shadow: 0 8px 30px rgba(24, 119, 242, 0.4);
            animation: pulse-icon 3s ease-in-out infinite;
        }

        @@keyframes pulse-icon {
            0%, 100% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }
        }

        .group-title h2 {
            font-size: 2rem;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 8px;
        }

        .group-subtitle {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .group-actions {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .btn {
            border-radius: 12px;
            padding: 12px 24px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }

        .btn-facebook {
            background: linear-gradient(135deg, #1877f2, #42a5f5);
            border: none;
            color: white;
            box-shadow: 0 4px 15px rgba(24, 119, 242, 0.3);
        }

            .btn-facebook:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(24, 119, 242, 0.4);
                color: white;
            }

        .btn-edit {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            border: none;
            color: white;
            box-shadow: 0 4px 15px rgba(245, 158, 11, 0.3);
        }

            .btn-edit:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(245, 158, 11, 0.4);
                color: white;
            }

        .btn-delete {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            border: none;
            color: white;
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3);
        }

            .btn-delete:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
                color: white;
            }

        .btn-back {
            background: rgba(139, 92, 246, 0.1);
            border: 1px solid rgba(139, 92, 246, 0.4);
            color: #8b5cf6;
        }

            .btn-back:hover {
                background: #8b5cf6;
                color: white;
                transform: translateY(-2px);
            }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stats-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(147, 51, 234, 0.3);
            border-radius: 20px;
            padding: 25px;
            text-align: center;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
        }

            .stats-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
                transition: left 0.5s;
            }

            .stats-card:hover::before {
                left: 100%;
            }

            .stats-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 30px rgba(124, 58, 237, 0.3);
                border-color: rgba(147, 51, 234, 0.5);
            }

        .stats-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
            background: linear-gradient(45deg, #8b5cf6, #a78bfa);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stats-number {
            font-size: 2.5rem;
            font-weight: 800;
            color: #ffffff;
            margin-bottom: 5px;
            line-height: 1;
        }

        .stats-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 1rem;
            font-weight: 500;
        }

        /* Posts Section */
        .posts-section {
            background: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(147, 51, 234, 0.2);
            border-radius: 25px;
            padding: 30px;
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

            .section-title i {
                color: #8b5cf6;
                font-size: 1.5rem;
            }

        .posts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .post-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(147, 51, 234, 0.3);
            border-radius: 15px;
            padding: 20px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

            .post-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(124, 58, 237, 0.2);
                border-color: rgba(147, 51, 234, 0.5);
            }

        .post-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(147, 51, 234, 0.2);
        }

        .post-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 5px;
        }

        .post-date {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
        }

        .post-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-posted {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .status-not-posted {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .post-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn-toggle {
            flex: 1;
            padding: 8px 16px;
            font-size: 0.9rem;
            border-radius: 10px;
        }

        .btn-view-apartment {
            background: rgba(139, 92, 246, 0.1);
            border: 1px solid rgba(139, 92, 246, 0.4);
            color: #8b5cf6;
            flex: 1;
            padding: 8px 16px;
            font-size: 0.9rem;
            border-radius: 10px;
            text-decoration: none;
            text-align: center;
            transition: all 0.3s ease;
        }

            .btn-view-apartment:hover {
                background: #8b5cf6;
                color: white;
            }

        .no-posts {
            text-align: center;
            padding: 60px 20px;
            color: rgba(255, 255, 255, 0.6);
        }

            .no-posts i {
                font-size: 4rem;
                margin-bottom: 20px;
                color: #8b5cf6;
            }

        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

            .floating-elements::before {
                content: '';
                position: absolute;
                top: 15%;
                left: 80%;
                width: 120px;
                height: 120px;
                background: radial-gradient(circle, rgba(147, 51, 234, 0.1) 0%, transparent 70%);
                border-radius: 50%;
                animation: float 8s ease-in-out infinite;
            }

            .floating-elements::after {
                content: '';
                position: absolute;
                bottom: 25%;
                left: 10%;
                width: 150px;
                height: 150px;
                background: radial-gradient(circle, rgba(124, 58, 237, 0.1) 0%, transparent 70%);
                border-radius: 50%;
                animation: float 10s ease-in-out infinite reverse;
            }

        @@keyframes float {
            0%, 100% {
                transform: translateY(0px);
            }

            50% {
                transform: translateY(-25px);
            }
        }

        /* Alert Styles */
        .alert {
            border: none;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            backdrop-filter: blur(10px);
            border-left: 4px solid;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            animation: slideInDown 0.5s ease-out;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
            border-left-color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .alert-danger {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
            border-left-color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        @@keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .page-title {
                font-size: 1.8rem;
            }

            .group-header {
                flex-direction: column;
                text-align: center;
                gap: 20px;
            }

            .group-actions {
                justify-content: center;
                flex-wrap: wrap;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
            }

            .posts-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .main-content {
                padding: 20px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="floating-elements"></div>
    @Html.AntiForgeryToken()

    <div class="main-container">
        <div class="row g-0 h-100">

            @await Html.PartialAsync("_Sidebar")

            <!-- Main Content -->
            <div class="col-lg-10 col-md-9">
                <div class="main-content">

                    <!-- Breadcrumb -->
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="@Url.Action("Index", "FacebookGroup")">Facebook Groups</a></li>
                            <li class="breadcrumb-item active" aria-current="page">@Model.GroupName</li>
                        </ol>
                    </nav>

                    <!-- Alerts -->
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-check-circle me-3" style="font-size: 1.2rem;"></i>
                                <div>
                                    <strong>Success!</strong> @TempData["SuccessMessage"]
                                </div>
                            </div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <!-- Group Info Card -->
                    <div class="group-info-card">
                        <div class="group-header">
                            <div class="group-avatar">
                                <i class="fab fa-facebook-f"></i>
                            </div>
                            <div class="group-title">
                                <h2>@Model.GroupName</h2>
                                <div class="group-subtitle">
                                    <i class="fas fa-users"></i>
                                    <span>Facebook Group</span>
                                    @if (!string.IsNullOrEmpty(Model.GroupLink))
                                    {
                                        <span>•</span>
                                        <span class="copy-link-btn" style="cursor:pointer;" data-link="@Model.GroupLink">
                                            <i class="fas fa-link"></i> Copy Link
                                        </span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="group-actions">
                            <a href="@Url.Action("Index", "FacebookGroup")" class="btn btn-back">
                                <i class="fas fa-arrow-left"></i>
                                Back to Groups
                            </a>
                            @if (!string.IsNullOrEmpty(Model.GroupLink))
                            {
                                <a href="@Model.GroupLink" target="_blank" class="btn btn-facebook">
                                    <i class="fab fa-facebook-f"></i>
                                    Visit Group
                                </a>
                            }
                            <a href="@Url.Action("Edit", "FacebookGroup", new { id = Model.Id })" class="btn btn-edit">
                                <i class="fas fa-edit"></i>
                                Edit Group
                            </a>
                            <a href="@Url.Action("Delete", "FacebookGroup", new { id = Model.Id })" class="btn btn-delete">
                                <i class="fas fa-trash-alt"></i>
                                Delete Group
                            </a>
                        </div>
                    </div>

                    <!-- Stats Cards -->
                    <div class="stats-grid">
                        <div class="stats-card">
                            <div class="stats-icon">
                                <i class="fas fa-share-alt"></i>
                            </div>
                            <div class="stats-number">@(Model.ApartmentPosts?.Count ?? 0)</div>
                            <div class="stats-label">Total Posts</div>
                        </div>
                        <div class="stats-card">
                            <div class="stats-icon">
                                <i class="fas fa-check-circle"></i>
                            </div>
                            <div class="stats-number">@(Model.ApartmentPosts?.Count(p => p.IsPosted) ?? 0)</div>
                            <div class="stats-label">Posted</div>
                        </div>
                        <div class="stats-card">
                            <div class="stats-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="stats-number">@(Model.ApartmentPosts?.Count(p => !p.IsPosted) ?? 0)</div>
                            <div class="stats-label">Pending</div>
                        </div>
                        <div class="stats-card">
                            <div class="stats-icon">
                                <i class="fas fa-percentage"></i>
                            </div>
                            <div class="stats-number">@(Model.ApartmentPosts?.Any() == true ? Math.Round((double)Model.ApartmentPosts.Count(p => p.IsPosted) / Model.ApartmentPosts.Count * 100, 1) : 0)%</div>
                            <div class="stats-label">Posted Rate</div>
                        </div>
                    </div>

                    <!-- Posts Section -->
                    <div class="posts-section">
                        <h3 class="section-title">
                            <i class="fas fa-list"></i>
                            Apartment Posts
                        </h3>

                        @if (Model.ApartmentPosts != null && Model.ApartmentPosts.Any())
                        {
                            <div class="posts-grid">
                                @foreach (var post in Model.ApartmentPosts.OrderBy(p => p.IsPosted).ThenByDescending(p => p.Apartment?.Title))
                                {
                                    <div class="post-card">
                                        <div class="post-header">
                                            <div>
                                                <div class="post-title">@(post.Apartment?.Title ?? "Unknown Apartment")</div>
                                                <div class="post-date">
                                                    <i class="fas fa-map-marker-alt"></i>
                                                    @(post.Apartment?.Location ?? "No location")
                                                </div>
                                            </div>
                                            <div class="post-status @(post.IsPosted ? "status-posted" : "status-not-posted")">
                                                @if (post.IsPosted)
                                                {
                                                    <i class="fas fa-check"></i>
                                                    <span>Posted</span>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-clock"></i>
                                                    <span>Pending</span>
                                                }
                                            </div>
                                        </div>

                                        <div class="post-actions">
                                            <button onclick="togglePostStatus(@post.ApartmentId, @Model.Id, this)"
                                                    class="btn btn-toggle @(post.IsPosted ? "btn-delete" : "btn-success")"
                                                    data-apartment-id="@post.ApartmentId"
                                                    data-group-id="@Model.Id">
                                                <i class="fas @(post.IsPosted ? "fa-times" : "fa-check")"></i>
                                                @(post.IsPosted ? "Mark Not Posted" : "Mark Posted")
                                            </button>
                                            <a href="@Url.Action("Details", "Apartment", new { id = post.ApartmentId })"
                                               class="btn-view-apartment">
                                                <i class="fas fa-eye"></i>
                                                View Apartment
                                            </a>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-posts">
                                <i class="fas fa-inbox"></i>
                                <h4>No Posts Found</h4>
                                <p>This group doesn't have any apartment posts yet.</p>
                            </div>
                        }
                    </div>

                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.7.32/sweetalert2.all.min.js"></script>
    <script>
                document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.copy-link-btn').forEach(el => {
                el.addEventListener('click', function () {
                    const link = this.getAttribute('data-link');
                    if (!link) return;

                    navigator.clipboard.writeText(link)
                        .then(() => {
                            showToast('Group link copied!', 'success');
                        })
                        .catch(err => {
                            console.error('Copy failed:', err);
                            showToast('Failed to copy link', 'error');
                        });
                });
            });
            // Auto-hide alert messages
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function (alert) {
                setTimeout(function () {
                    alert.classList.add('fade-out');
                    setTimeout(function () {
                        if (alert.parentNode) {
                            alert.parentNode.removeChild(alert);
                        }
                    }, 500);
                }, 5000);
            });

            // Delete confirmation with SweetAlert2
            const deleteButtons = document.querySelectorAll('.btn-delete');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const groupId = @Model.Id; // Get group ID from model
                    const groupName = '@Model.GroupName'; // Get group name from model

                    Swal.fire({
                        title: 'Delete Facebook Group?',
                        html: `Are you sure you want to delete <strong>${groupName}</strong>?<br>This action cannot be undone!`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ef4444',
                        cancelButtonColor: '#6b7280',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel',
                        background: 'rgba(26, 26, 46, 0.95)',
                        color: '#ffffff',
                        backdrop: 'rgba(0,0,0,0.8)',
                        customClass: {
                            popup: 'swal2-popup',
                            title: 'swal2-title',
                            htmlContainer: 'swal2-html-container',
                            confirmButton: 'swal2-confirm',
                            cancelButton: 'swal2-cancel'
                        }
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            // Show loading indicator
                            Swal.fire({
                                title: 'Deleting...',
                                text: 'Please wait while we delete the group.',
                                icon: 'info',
                                allowOutsideClick: false,
                                showConfirmButton: false,
                                background: 'rgba(26, 26, 46, 0.95)',
                                color: '#ffffff',
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            try {
                                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
                                const response = await fetch('/FacebookGroup/DeleteAjax', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/x-www-form-urlencoded',
                                        'X-Requested-With': 'XMLHttpRequest'
                                    },
                                    body: `id=${groupId}&__RequestVerificationToken=${token}`
                                });

                                const result = await response.json();

                                if (result.success) {
                                    Swal.fire({
                                        title: 'Deleted!',
                                        text: result.message,
                                        icon: 'success',
                                        background: 'rgba(26, 26, 46, 0.95)',
                                        color: '#ffffff',
                                        confirmButtonColor: '#10b981',
                                        timer: 2000,
                                        timerProgressBar: true
                                    }).then(() => {
                                        // Redirect to groups list
                                        window.location.href = '/FacebookGroup/Index';
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Error!',
                                        text: result.message || 'Failed to delete the group.',
                                        icon: 'error',
                                        background: 'rgba(26, 26, 46, 0.95)',
                                        color: '#ffffff',
                                        confirmButtonColor: '#ef4444'
                                    });
                                }
                            } catch (error) {
                                console.error('Delete error:', error);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while deleting the group.',
                                    icon: 'error',
                                    background: 'rgba(26, 26, 46, 0.95)',
                                    color: '#ffffff',
                                    confirmButtonColor: '#ef4444'
                                });
                            }
                        }
                    });
                });
            });
            // Toggle post status confirmation
            const toggleButtons = document.querySelectorAll('.btn-toggle');
            toggleButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const apartmentId = this.getAttribute('data-apartment-id');
                    const groupId = this.getAttribute('data-group-id');
                    const isCurrentlyPosted = this.classList.contains('btn-delete');
                    const action = isCurrentlyPosted ? 'unmark as not posted' : 'mark as posted';

                    Swal.fire({
                        title: 'Confirm Status Change',
                        html: `Are you sure you want to <strong>${action}</strong> this apartment in the group?`,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#10b981',
                        cancelButtonColor: '#6b7280',
                        confirmButtonText: `Yes, ${action}`,
                        cancelButtonText: 'Cancel',
                        background: 'rgba(26, 26, 46, 0.95)',
                        color: '#ffffff',
                        backdrop: 'rgba(0,0,0,0.8)'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            togglePostStatus(apartmentId, groupId, this);
                        }
                    });
                });
            });

            // Toast notification function
            function showToast(message, type = 'info') {
                const toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    background: 'rgba(26, 26, 46, 0.95)',
                    color: '#ffffff',
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                });

                toast.fire({
                    icon: type,
                    title: message
                });
            }

            // Toggle post status function
            async function togglePostStatus(apartmentId, groupId, button) {
                const originalText = button.innerHTML;
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

                try {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    const response = await fetch('/FacebookGroup/TogglePostStatus', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: `apartmentId=${apartmentId}&groupId=${groupId}&__RequestVerificationToken=${token}`
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {
                        // Update UI
                        const isPosted = result.isPosted;
                        button.className = `btn btn-toggle ${isPosted ? 'btn-delete' : 'btn-success'}`;
                        button.innerHTML = `<i class="fas ${isPosted ? 'fa-times' : 'fa-check'}"></i> ${isPosted ? 'Mark Not Posted' : 'Mark Posted'}`;

                        // Update status badge
                        const statusBadge = button.closest('.post-card').querySelector('.post-status');
                        statusBadge.className = `post-status ${isPosted ? 'status-posted' : 'status-not-posted'}`;
                        statusBadge.innerHTML = isPosted ?
                            '<i class="fas fa-check"></i> <span>Posted</span>' :
                            '<i class="fas fa-clock"></i> <span>Pending</span>';

                        showToast(result.message, 'success');
                        updateStatsCounters();
                    } else {
                        showToast(result.message || 'Error updating post status', 'error');
                        button.innerHTML = originalText;
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Error updating post status', 'error');
                    button.innerHTML = originalText;
                }

                button.disabled = false;
            }
            // Update stats counters
            function updateStatsCounters() {
                const allPosts = document.querySelectorAll('.post-card').length;
                const postedPosts = document.querySelectorAll('.status-posted').length;
                const pendingPosts = document.querySelectorAll('.status-not-posted').length;
                const postingRate = allPosts > 0 ? Math.round((postedPosts / allPosts) * 100 * 10) / 10 : 0;

                // Update stats cards
                const statsCards = document.querySelectorAll('.stats-card .stats-number');
                if (statsCards.length >= 4) {
                    statsCards[0].textContent = allPosts;
                    statsCards[1].textContent = postedPosts;
                    statsCards[2].textContent = pendingPosts;
                    statsCards[3].textContent = postingRate + '%';
                }
            }

            // Add ripple effect to buttons
            document.addEventListener('click', function (e) {
                if (e.target.classList.contains('btn') || e.target.closest('.btn')) {
                    const button = e.target.classList.contains('btn') ? e.target : e.target.closest('.btn');
                    const ripple = document.createElement('span');
                    const rect = button.getBoundingClientRect();
                    const size = Math.max(rect.width, rect.height);
                    const x = e.clientX - rect.left - size / 2;
                    const y = e.clientY - rect.top - size / 2;

                    ripple.style.cssText = `
            position: absolute;
            width: ${size}px;
            height: ${size}px;
            left: ${x}px;
            top: ${y}px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transform: scale(0);
            animation: ripple 0.6s linear;
            pointer-events: none;
            `;

                    button.style.position = 'relative';
                    button.style.overflow = 'hidden';
                    button.appendChild(ripple);

                    setTimeout(() => {
                        ripple.remove();
                    }, 600);
                }
            });

            // Add CSS for animations
            const style = document.createElement('style');
            style.textContent = `
            @@keyframes ripple {
                to {
                transform: scale(2);
            opacity: 0;
                            }
                        }
            .fade-out {
                opacity: 0;
            transition: opacity 0.5s ease;
                        }
            .btn-loading .btn-text {
                opacity: 0;
                        }
            .btn-loading::after {
                content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            transform: translate(-50%, -50%);
                        }
            @@keyframes spin {
                0 % { transform: translate(-50 %, -50 %) rotate(0deg); }
                            100% {transform: translate(-50%, -50%) rotate(360deg); }
                        }
            `;
            document.head.appendChild(style);
        });

    </script>
</body>
</html>